trigger:
  batch: true
  branches:
    include:
      - main
pr: none
pool:
  vmImage: 'ubuntu-latest'
  demands:
  - allowFrontend
resources:
- repo: self

variables:
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/') }}:
    branchName: $[replace(variables['Build.SourceBranch'], 'refs/heads/', '')]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}:
    branchName: $[replace(variables['System.PullRequest.SourceBranch'], 'refs/heads/', '')]
  gradleProperties: -PkeystorePath=$(keystoreFile.secureFilePath) -PkeystorePassword=$(keystorePassword) -PserviceAccountLocation=$(serviceAccount.secureFilePath) -PbuildCode=$(Build.BuildId)

stages:
- stage: Setup
  jobs:
  - job: Setup
    steps:
    - checkout: self
      persistCredentials: true
      submodules: recursive
    - task: CmdLine@2
      displayName: 'Git checkout'
      inputs:
        script: |
          git config --global user.email "azure@jedlix.com"
          git config --global user.name "Azure Pipeline"
          git checkout $(branchName)
    - task: CmdLine@2
      displayName: 'Set parameters'
      inputs:
        script: |
          export file=android/example/src/main/java/com/jedlix/sdk/example/ExampleApplication.kt
          sed -i '\|//|s|^//||' $file
          sed -i 's|<AUTH0 CLIENT ID>|$(auth0ClientId)|' $file
          sed -i 's|<AUTH0 DOMAIN>|$(auth0Domain)|' $file
          sed -i 's|<AUTH0 AUDIENCE>|$(auth0Audience)|' $file
          sed -i 's|<USER IDENTIFIER KEY>|$(userIdentifierKey)|' $file
          sed -i 's|<YOUR BASE URL>|$(baseUrl)|' $file

- stage: Build
  jobs:
  - job: 'JedlixSDK'
    steps:
    - task: DownloadSecureFile@1
      name: keystoreFile
      displayName: 'Download Keystore File'
      inputs:
        secureFile: upload-keystore.jks
    - task: DownloadSecureFile@1
      name: serviceAccount
      displayName: 'Download Secure Service Account JSON'
      inputs:
        secureFile: jedlix-service-account.json
    - task: Gradle@2
      displayName: 'Build'
      continueOnError: true
      inputs:
        workingDirectory: 'android'
        gradleWrapperFile: 'android/gradlew'
        gradleOptions: '-Xmx3072m'
        tasks: ":example:publishReleaseBundle $(gradleProperties)"

- stage: GitTag
  jobs:
  - job: GitTag
    steps:
    - checkout: self
      persistCredentials: true
    - bash: |
          git config --global user.email "azure@jedlix.com"
          git config --global user.name "Azure Pipeline"
          VERSION=$(cat android/example/build.gradle.kts | grep -m1 'versionName' | cut -d'=' -f2 | tr -d ' ' | tr -d ';' | tr -d '"')
          TAG=v$VERSION-$BUILD_NUMBER
          git tag $TAG
          git push origin $TAG
      displayName: 'Git tag'
      env:
        BUILD_NUMBER: $(Build.BuildId)
